package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ListView;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.io.*;

public class DisplayOrdersController {
	@FXML
	private Button bWriteFile;
	@FXML
	private Button bFillOrder;
	@FXML
	private Button bViewCustomer;
	@FXML
	private Button bNewOrder;
	@FXML
	private ListView lvUnfilled;
	@FXML
	private ListView lvFilled;
	
	/////////////////////////////////////////////////////////
	//controller for Display orders (so we can set its label)
	//accessor method for controller
	public void setController(NewOrderController c) {
		newOrderController = c;
	}
	///////////////////////////////////////////////////////////
	
	//EditOrder Stage and controller, start with null
	private Stage editOrderStage;
	private EditOrdersController editOrderController;
	
	//View Customer Stage and controller, start with null
	private Stage viewCustomerStage;
	private ViewCustomerController viewCustomerController;
	
	//View Customer Stage and controller, start with null
	private Stage newOrderStage;
	private NewOrderController newOrderController;
	
	ArrayList<Customer> customers = new ArrayList<>();
	ArrayList<Order> orders = new ArrayList<>();
	ArrayList<Order> unfilled = new ArrayList<>();
	ArrayList<Order> filled = new ArrayList<>();

	//===================================================
	ArrayList<Thneed> thneeds = new ArrayList<Thneed>();
	//===================================================

	private int numOrders = 0;
	
	private Stage warningDialogStage;
	private WarningDialogController warningDialogController;

	
	public void launchWarningDialog(String message) {
		if (warningDialogStage == null) {
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/WarningDialog.fxml"));
			AnchorPane warningDialogPane;
				try {
					warningDialogPane = (AnchorPane)loader.load();
					Scene warningDialogScene = new Scene(warningDialogPane);
					warningDialogStage = new Stage();
					warningDialogStage.setScene(warningDialogScene);
					warningDialogStage.setTitle("Warning:");
					warningDialogController  = (WarningDialogController) loader.getController();
					warningDialogController.setController(this);
				}catch(IOException e) {
					e.printStackTrace();
				}
			}
			warningDialogController.setLabel(message);
			warningDialogStage.show();	
	}
	
	
	@FXML
	public void initialize() {
		try {
	         FileInputStream fileIn = new FileInputStream("./orderData.ser");
	         ObjectInputStream in = new ObjectInputStream(fileIn);
	         orders = (ArrayList<Order>) in.readObject();
	         in.close();
	         fileIn.close();
	      } catch (IOException i) {
	         i.printStackTrace();
	         return;
	      } catch (ClassNotFoundException c) {
	         System.out.println("Order class not found");
	         c.printStackTrace();
	         return;
	      }
		finally {
			for(Order o: orders) {
				if(o.getDateFilled() == null) {
					unfilled.add(o); //add unfilled orders to unfilled ArrayList
				}
				else
					filled.add(o); //add filled orders to filled ArrayList
					
				customers.add(o.getCustomer()); //add customer info to customers arraylist
			}
			
//			for(Customer c: customers) { //invalid class exceptions just fuck me now
//				newOrderController.addCustomer(c);
//			}
			
			ObservableList<Order> olUnfilled = FXCollections.observableList(unfilled); //turn ArrayList into ObservableList
			lvUnfilled.setItems(olUnfilled); //populate unfilled listview
			
			ObservableList<Order> olFilled = FXCollections.observableList(filled); //turn ArrayList into ObservableList
			lvFilled.setItems(olFilled); //populate filled listview
		}
		
		
		numOrders = orders.size();	
	}

	

	public void addOrder(Order order) {
		if(order.getDateFilled() == null) {
			lvUnfilled.getItems().add(order);
			orders.add(order);
		}
		else
			lvFilled.getItems().add(order);
	}
	
	//public void remove Order from unfilled
	public void removeOrder(Order order) {
		lvUnfilled.getItems().remove(order);
	}

	public int getNumOrders() {
		return numOrders;
	}
	public int setNumOrders(int numOrders) {
		this.numOrders = numOrders;
		return this.numOrders;
	}
	
	// Event Listener on Button[#bWriteFile].onAction
	@FXML
	public void bWriteFileClick(ActionEvent event) {
		// TODO Autogenerated
		
		try { //write order data to a file
	        FileOutputStream fileOut =
	        new FileOutputStream("./orderData.ser"); //save the data in src/customerData.ser
	        ObjectOutputStream out = new ObjectOutputStream(fileOut);
	        out.writeObject(orders);
	        out.close();
	        fileOut.close();
	        System.out.printf("Serialized data is saved in ./ordersData.ser\n");
	     } 
		catch (IOException i) {
	        i.printStackTrace();
	     }
		
	}
	// Event Listener on Button[#bFillOrder].onAction
	@FXML
	public void bFillOrderClick(ActionEvent event) {
		if (lvUnfilled.getSelectionModel().getSelectedItem() == null) {
			launchWarningDialog("Please select/create an UNFILLED order.");
		}
		else {
		if (editOrderStage == null) {
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/EditOrders.fxml"));
			AnchorPane editOrderPane;
				try {
					editOrderPane = (AnchorPane)loader.load();
					Scene editOrderScene = new Scene(editOrderPane);
					editOrderStage = new Stage();
					editOrderStage.setScene(editOrderScene);
					editOrderStage.setTitle("Fill Order");
					editOrderController  = (EditOrdersController) loader.getController();
					editOrderController.setController(this);
				}catch(IOException e) {
					e.printStackTrace();
				}
			}
			//set the label on window 2 then show it
			//controller.setLabel(textForWindow2Text.getText());
			Order selected = (Order) lvUnfilled.getSelectionModel().getSelectedItem();
			editOrderController.setOrderLabel(selected);
			editOrderStage.show();
		}	
	}
	// Event Listener on Button[#bViewCustomer].onAction
	@FXML
	public void bViewCustomerClick(ActionEvent event) {	
			//set the label on window 2 then show it
			if (lvUnfilled.getSelectionModel().getSelectedItem() == null && lvFilled.getSelectionModel().getSelectedItem() == null) {
				launchWarningDialog("Please select an order to view its associated customer.");
			}
			else if (lvFilled.getSelectionModel().getSelectedItem() == null){
				if (viewCustomerStage == null) {
					FXMLLoader loader = new FXMLLoader(getClass().getResource("/ViewCustomer.fxml"));
					AnchorPane viewCustomerPane;
						try {
							viewCustomerPane = (AnchorPane)loader.load();
							Scene viewCustomerScene = new Scene(viewCustomerPane);
							viewCustomerStage = new Stage();
							viewCustomerStage.setScene(viewCustomerScene);
							viewCustomerStage.setTitle("Associated Customer");
							viewCustomerController  = (ViewCustomerController) loader.getController();
							viewCustomerController.setController(this);
						}catch(IOException e) {
							e.printStackTrace();
						}
					}
				Order selected = (Order) lvUnfilled.getSelectionModel().getSelectedItem();
				Customer selectedCustomer = selected.getCustomer();
				for(Thneed t: selected.getThneeds()) {
					thneeds.add(t);
					viewCustomerController.addTnneed(t);
				}
				viewCustomerController.setlName(selectedCustomer.getName());
				viewCustomerController.setlId(String.valueOf(selectedCustomer.getID()));
				viewCustomerController.setAddress(selectedCustomer.getAddress());
				viewCustomerController.setLphone(selectedCustomer.getPhone());
				viewCustomerStage.show();
			}
			else {
				if (viewCustomerStage == null) {
					FXMLLoader loader = new FXMLLoader(getClass().getResource("/ViewCustomer.fxml"));
					AnchorPane viewCustomerPane;
						try {
							viewCustomerPane = (AnchorPane)loader.load();
							Scene viewCustomerScene = new Scene(viewCustomerPane);
							viewCustomerStage = new Stage();
							viewCustomerStage.setScene(viewCustomerScene);
							viewCustomerStage.setTitle("Associated Customer");
							viewCustomerController  = (ViewCustomerController) loader.getController();
							viewCustomerController.setController(this);
						}catch(IOException e) {
							e.printStackTrace();
						}
					}
				Order selected = (Order) lvFilled.getSelectionModel().getSelectedItem();
				Customer selectedCustomer = selected.getCustomer();
				for(Thneed t: selected.getThneeds()) {
					thneeds.add(t);
					viewCustomerController.addTnneed(t);
				}
				viewCustomerController.setlName(selectedCustomer.getName());
				viewCustomerController.setlId(String.valueOf(selectedCustomer.getID()));
				viewCustomerController.setAddress(selectedCustomer.getAddress());
				viewCustomerController.setLphone(selectedCustomer.getPhone());
				viewCustomerStage.show();
			}
	}
	// Event Listener on Button[#bNewOrder].onAction
	@FXML
	public void bNewOrderClick(ActionEvent event) {
		// TODO Autogenerated
		//if first time in the buttonClick, load window 2
			if (newOrderStage == null) {
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/NewOrder.fxml"));
			AnchorPane newOrderPane;
				try {
					newOrderPane = (AnchorPane)loader.load();
					Scene newOrderScene = new Scene(newOrderPane);
					newOrderStage = new Stage();
					newOrderStage.setScene(newOrderScene);
					newOrderStage.setTitle("New Thneed Order");
					newOrderController  = (NewOrderController) loader.getController();
					newOrderController.setController(this);
				}catch(IOException e) {
					e.printStackTrace();
				}
			}
			
			newOrderStage.show();
	}
}


